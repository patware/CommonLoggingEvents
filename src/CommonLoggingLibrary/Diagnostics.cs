// Generated by a tool, do not change manually
// Tool: GenerateLibrary.ps1
// Generated Date: 
using System;
using Microsoft.Extensions.Logging;

namespace CommonLoggingLibrary.Diagnostics
{
  /// <summary>
  /// Events that are specialized in Diagnostics like Smoke testing, Tracing and Health verification.  Smoke Testing, from Electronics field is the simplest form of validation and is to verify that the app can start and answer a call.  The Tracing tests are used to verify that the external dependencies the app is using are the ones that are expected.  The Health check is more in-depth and complete and similar to self-diagnostics, and would involve running simulations that includes external services.
  /// </summary>
  public static class DiagnosticsLoggingExtensions
  {
    /// <summary>
    /// 210: Private static Declarator of <see cref="HealthCheckStarted"/>
    /// </summary>
    private readonly static Action<ILogger, Exception?> _healthCheckStarted = LoggerMessage.Define(LogLevel.Information, EventIds.Constants.DIAGNOSTICS_HEALTHCHECKSTARTED, "Health Check Started");

    /// <summary>
    /// 210 - Health check is much more complex and thorough than a self-diagnostics.
    /// Writes a message like "Health Check Started"
    /// of <see cref="Microsoft.Extensions.Logging.LogLevel.Information"/> and Event ID <see cref="EventIds.Constants.DIAGNOSTICS_HEALTHCHECKSTARTED">210</see>  (of event level/category <see cref="EventIds.OperationalInformation"/>)
    /// </summary>
    /// <remarks>
    /// <para>During a health check, a battery of tests are typically performed, validating that it&#39;s capable of calling, modifying, deleting, interacting with every part of the system, including external systems.</para>
    /// <para>The goal of a health check is to make sure it catches actions it can&#39;t do before the end-user figures it out, good UX.</para>
    /// <para>A great application will have a plan B in the event it finds it can&#39;t do certain actions, inform the IT/Admins and update the UI accordingly so the user aware of the situation but that they&#39;re in good hands and that they don&#39;t have to worry, things will be alright.</para>
    /// <para>There&#39;s a good chance that this when the application is put in {see 401} degraded mode.</para>
    /// </remarks>
    public static void Diagnostics_HealthCheckStarted(this ILogger logger) => _healthCheckStarted(logger, default!);

    /// <summary>
    /// 207: Private static Declarator of <see cref="TraceFinished"/>
    /// </summary>
    private readonly static Action<ILogger, string, Exception?> _traceFinished = LoggerMessage.Define<string>(LogLevel.Information, EventIds.Constants.DIAGNOSTICS_TRACEFINISHED, "Trace finished. Target: {target}");

    /// <summary>
    /// 207 - Marks the end of a trace, that the app is returning the trace results.
    /// Writes a message like "Trace finished. Target: {target}"
    /// of <see cref="Microsoft.Extensions.Logging.LogLevel.Information"/> and Event ID <see cref="EventIds.Constants.DIAGNOSTICS_TRACEFINISHED">207</see>  (of event level/category <see cref="EventIds.OperationalInformation"/>)
    /// </summary>
    public static void Diagnostics_TraceFinished(this ILogger logger, string target) => _traceFinished(logger, target, default!);

    /// <summary>
    /// 211: Private static Declarator of <see cref="HealthCheckIsHealthy"/>
    /// </summary>
    private readonly static Action<ILogger, string, Exception?> _healthCheckIsHealthy = LoggerMessage.Define<string>(LogLevel.Information, EventIds.Constants.DIAGNOSTICS_HEALTHCHECKISHEALTHY, "Healthy - Number of tests: {numberOfTests}");

    /// <summary>
    /// 211 - All tests have returned and the app got a passing grade.
    /// Writes a message like "Healthy - Number of tests: {numberOfTests}"
    /// of <see cref="Microsoft.Extensions.Logging.LogLevel.Information"/> and Event ID <see cref="EventIds.Constants.DIAGNOSTICS_HEALTHCHECKISHEALTHY">211</see>  (of event level/category <see cref="EventIds.OperationalInformation"/>)
    /// </summary>
    public static void Diagnostics_HealthCheckIsHealthy(this ILogger logger, string numberOfTests) => _healthCheckIsHealthy(logger, numberOfTests, default!);

    /// <summary>
    /// 418: Private static Declarator of <see cref="ImaTeapot"/>
    /// </summary>
    private readonly static Action<ILogger, Exception?> _imaTeapot = LoggerMessage.Define(LogLevel.Information, EventIds.Constants.DIAGNOSTICS_IMATEAPOT, "Event raised when describing HTCPCP, a protocol for controlling, monitoring, and diagnosing coffee pots.");

    /// <summary>
    /// 418 - There is coffee all over the world. Increasingly, in a world in which computing is ubiquitous, the computists want to make coffee. Coffee brewing is an art, but the distributed intelligence of the web-connected world transcends art.  Thus, there is a strong, dark, rich requirement for a protocol designed espressoly for the brewing of coffee. Coffee is brewed using coffee pots.  Networked coffee pots require a control protocol if they are to be controlled
    /// Writes a message like "Event raised when describing HTCPCP, a protocol for controlling, monitoring, and diagnosing coffee pots."
    /// of <see cref="Microsoft.Extensions.Logging.LogLevel.Information"/> and Event ID <see cref="EventIds.Constants.DIAGNOSTICS_IMATEAPOT">418</see>  (of event level/category <see cref="EventIds.OperationalInformation"/>)
    /// </summary>
    /// <remarks>
    /// <para>Increasingly, home and consumer devices are being connected to the Internet. Early networking experiments demonstrated vending devices connected to the Internet for status monitoring [COKE]. One of the first remotely _operated_ machine to be hooked up to the Internet, the Internet Toaster, (controlled via SNMP) was debuted in 1990[RFC2235].</para>
    /// <para>The demand for ubiquitous appliance connectivity that is causing the consumption of the IPv4 address space. Consumers want remote control of devices such as coffee pots so that they may wake up to freshly brewed coffee, or cause coffee to be prepared at a precise time after the completion of dinner preparations.</para>
    /// </remarks>
    public static void Diagnostics_ImaTeapot(this ILogger logger) => _imaTeapot(logger, default!);

    /// <summary>
    /// 302: Private static Declarator of <see cref="ValidationFailed"/>
    /// </summary>
    private readonly static Action<ILogger, string[], Exception?> _validationFailed = LoggerMessage.Define<string[]>(LogLevel.Warning, EventIds.Constants.DIAGNOSTICS_VALIDATIONFAILED, "Self-Check found issues.  {issues}");

    /// <summary>
    /// 302 - Self-Check found issues.
    /// Writes a message like "Self-Check found issues.  {issues}"
    /// of <see cref="Microsoft.Extensions.Logging.LogLevel.Warning"/> and Event ID <see cref="EventIds.Constants.DIAGNOSTICS_VALIDATIONFAILED">302</see>  (of event level/category <see cref="EventIds.OperationalWarning"/>)
    /// </summary>
    public static void Diagnostics_ValidationFailed(this ILogger logger, string[] issues) => _validationFailed(logger, issues, default!);

    /// <summary>
    /// 208: Private static Declarator of <see cref="SelfCheckStarted"/>
    /// </summary>
    private readonly static Action<ILogger, string, Exception?> _selfCheckStarted = LoggerMessage.Define<string>(LogLevel.Information, EventIds.Constants.DIAGNOSTICS_SELFCHECKSTARTED, "Self-Check started.  Requested by {trigger}");

    /// <summary>
    /// 208 - Just like Data in Star Trek, or your car when you turn the key, these are quick tests.  This marks the start of the self-diagnostics.
    /// Writes a message like "Self-Check started.  Requested by {trigger}"
    /// of <see cref="Microsoft.Extensions.Logging.LogLevel.Information"/> and Event ID <see cref="EventIds.Constants.DIAGNOSTICS_SELFCHECKSTARTED">208</see>  (of event level/category <see cref="EventIds.OperationalInformation"/>)
    /// </summary>
    /// <remarks>
    /// <para>Not to be confused with Health Check.  A health check is way more thorough and a long process than a self-check.</para>
    /// </remarks>
    public static void Diagnostics_SelfCheckStarted(this ILogger logger, string trigger) => _selfCheckStarted(logger, trigger, default!);

    /// <summary>
    /// 206: Private static Declarator of <see cref="TraceStarted"/>
    /// </summary>
    private readonly static Action<ILogger, string, Exception?> _traceStarted = LoggerMessage.Define<string>(LogLevel.Information, EventIds.Constants.DIAGNOSTICS_TRACESTARTED, "Trace started. Target: {target}");

    /// <summary>
    /// 206 - Like the HTTP verb TRACE or a network Trace method, this method indicates a &quot;Trace&quot; method has been issued, and might be about to call target systems
    /// Writes a message like "Trace started. Target: {target}"
    /// of <see cref="Microsoft.Extensions.Logging.LogLevel.Information"/> and Event ID <see cref="EventIds.Constants.DIAGNOSTICS_TRACESTARTED">206</see>  (of event level/category <see cref="EventIds.OperationalInformation"/>)
    /// </summary>
    public static void Diagnostics_TraceStarted(this ILogger logger, string target) => _traceStarted(logger, target, default!);

    /// <summary>
    /// 209: Private static Declarator of <see cref="SelfCheckValid"/>
    /// </summary>
    private readonly static Action<ILogger, string, Exception?> _selfCheckValid = LoggerMessage.Define<string>(LogLevel.Information, EventIds.Constants.DIAGNOSTICS_SELFCHECKVALID, "Functioning within designed parameters.  Number of tests: {numberOfTests}");

    /// <summary>
    /// 209 - All systems are go.
    /// Writes a message like "Functioning within designed parameters.  Number of tests: {numberOfTests}"
    /// of <see cref="Microsoft.Extensions.Logging.LogLevel.Information"/> and Event ID <see cref="EventIds.Constants.DIAGNOSTICS_SELFCHECKVALID">209</see>  (of event level/category <see cref="EventIds.OperationalInformation"/>)
    /// </summary>
    public static void Diagnostics_SelfCheckValid(this ILogger logger, string numberOfTests) => _selfCheckValid(logger, numberOfTests, default!);

    /// <summary>
    /// 205: Private static Declarator of <see cref="Pong"/>
    /// </summary>
    private readonly static Action<ILogger, Exception?> _pong = LoggerMessage.Define(LogLevel.Information, EventIds.Constants.DIAGNOSTICS_PONG, "Pong");

    /// <summary>
    /// 205 - Just like the HTTP verb HEAD, indicates a &quot;Ping&quot; method has been issued and the application is responding with a &quot;Pong&quot; indicating it&#39;s alive, kicking and ready to roll.
    /// Writes a message like "Pong"
    /// of <see cref="Microsoft.Extensions.Logging.LogLevel.Information"/> and Event ID <see cref="EventIds.Constants.DIAGNOSTICS_PONG">205</see>  (of event level/category <see cref="EventIds.OperationalInformation"/>)
    /// </summary>
    public static void Diagnostics_Pong(this ILogger logger) => _pong(logger, default!);

    /// <summary>
    /// 303: Private static Declarator of <see cref="HealthCheckIsUnhealthy"/>
    /// </summary>
    private readonly static Action<ILogger, string, Exception?> _healthCheckIsUnhealthy = LoggerMessage.Define<string>(LogLevel.Warning, EventIds.Constants.DIAGNOSTICS_HEALTHCHECKISUNHEALTHY, "Bad health report. Number of failed tests: {numberOfTests}.");

    /// <summary>
    /// 303 - Health check was performed, issues were found, the application is not working at 100% capacity.
    /// Writes a message like "Bad health report. Number of failed tests: {numberOfTests}."
    /// of <see cref="Microsoft.Extensions.Logging.LogLevel.Warning"/> and Event ID <see cref="EventIds.Constants.DIAGNOSTICS_HEALTHCHECKISUNHEALTHY">303</see>  (of event level/category <see cref="EventIds.OperationalWarning"/>)
    /// </summary>
    public static void Diagnostics_HealthCheckIsUnhealthy(this ILogger logger, string numberOfTests) => _healthCheckIsUnhealthy(logger, numberOfTests, default!);

  }
}

