// Generated by a tool, do not change manually
// Tool: GenerateLibrary.ps1
// Generated Date: 
using System;
using Microsoft.Extensions.Logging;

namespace CommonLoggingLibrary.Configuration
{
  /// <summary>
  /// Log entries/events about Configuration, like reading and validating configuration and settings.  Typical lifecycle of Configuration: Reading [-&gt; Validating -&gt; IsValid | NotVerifiable] -&gt; Unusable.
  /// </summary>
  public static class ConfigurationLoggingExtensions
  {
    /// <summary>
    /// 506: Private static Declarator of <see cref="ValueIsInvalid"/>
    /// </summary>
    private readonly static Action<ILogger, string, object, string, Exception?> _valueIsInvalid = LoggerMessage.Define<string, object, string>(LogLevel.Warning, EventIds.Constants.CONFIGURATION_VALUEISINVALID, "Configuration setting {friendlyName} with value {value} failed the test {test}.");

    /// <summary>
    /// 506 - The validation of a configuration setting failed.
    /// Writes a message like "Configuration setting {friendlyName} with value {value} failed the test {test}."
    /// of <see cref="Microsoft.Extensions.Logging.LogLevel.Warning"/> and Event ID <see cref="EventIds.Constants.CONFIGURATION_VALUEISINVALID">506</see>  (of event level/category <see cref="EventIds.UnrecoverableWarning"/>)
    /// </summary>
    public static void Configuration_ValueIsInvalid(this ILogger logger, string friendlyName, object value, string test) => _valueIsInvalid(logger, friendlyName, value, test, default!);

    /// <summary>
    /// 109: Private static Declarator of <see cref="Reading"/>
    /// </summary>
    private readonly static Action<ILogger, Exception?> _reading = LoggerMessage.Define(LogLevel.Information, EventIds.Constants.CONFIGURATION_READING, "Reading Configuration");

    /// <summary>
    /// 109 - Configuration has been dormant for a long time and needs to be re-hydrated.
    /// Writes a message like "Reading Configuration"
    /// of <see cref="Microsoft.Extensions.Logging.LogLevel.Information"/> and Event ID <see cref="EventIds.Constants.CONFIGURATION_READING">109</see>  (of event level/category <see cref="EventIds.LowLevel"/>)
    /// </summary>
    public static void Configuration_Reading(this ILogger logger) => _reading(logger, default!);

    /// <summary>
    /// 110: Private static Declarator of <see cref="Validating"/>
    /// </summary>
    private readonly static Action<ILogger, string, Exception?> _validating = LoggerMessage.Define<string>(LogLevel.Information, EventIds.Constants.CONFIGURATION_VALIDATING, "Validating Configuration {friendlyName}");

    /// <summary>
    /// 110 - We have the values from the configuration, but are they any good?  Test time.
    /// Writes a message like "Validating Configuration {friendlyName}"
    /// of <see cref="Microsoft.Extensions.Logging.LogLevel.Information"/> and Event ID <see cref="EventIds.Constants.CONFIGURATION_VALIDATING">110</see>  (of event level/category <see cref="EventIds.LowLevel"/>)
    /// </summary>
    public static void Configuration_Validating(this ILogger logger, string friendlyName) => _validating(logger, friendlyName, default!);

    /// <summary>
    /// 113: Private static Declarator of <see cref="VerifyingConnectionString"/>
    /// </summary>
    private readonly static Action<ILogger, string, string, Exception?> _verifyingConnectionString = LoggerMessage.Define<string, string>(LogLevel.Information, EventIds.Constants.CONFIGURATION_VERIFYINGCONNECTIONSTRING, "Verifying ConnectionString. name: {name}, connectionString: {connectionString}");

    /// <summary>
    /// 113 - Having a connection string doesn&#39;t mean it&#39;s useable, another taste test.
    /// Writes a message like "Verifying ConnectionString. name: {name}, connectionString: {connectionString}"
    /// of <see cref="Microsoft.Extensions.Logging.LogLevel.Information"/> and Event ID <see cref="EventIds.Constants.CONFIGURATION_VERIFYINGCONNECTIONSTRING">113</see>  (of event level/category <see cref="EventIds.LowLevel"/>)
    /// </summary>
    public static void Configuration_VerifyingConnectionString(this ILogger logger, string Name, string connectionString) => _verifyingConnectionString(logger, Name, connectionString, default!);

    /// <summary>
    /// 112: Private static Declarator of <see cref="ReadingConnectionString"/>
    /// </summary>
    private readonly static Action<ILogger, string, Exception?> _readingConnectionString = LoggerMessage.Define<string>(LogLevel.Information, EventIds.Constants.CONFIGURATION_READINGCONNECTIONSTRING, "Reading ConnectionString. name: {name}");

    /// <summary>
    /// 112 - Connection strings can be stored using a different configuration mechanism.
    /// Writes a message like "Reading ConnectionString. name: {name}"
    /// of <see cref="Microsoft.Extensions.Logging.LogLevel.Information"/> and Event ID <see cref="EventIds.Constants.CONFIGURATION_READINGCONNECTIONSTRING">112</see>  (of event level/category <see cref="EventIds.LowLevel"/>)
    /// </summary>
    public static void Configuration_ReadingConnectionString(this ILogger logger, string Name) => _readingConnectionString(logger, Name, default!);

    /// <summary>
    /// 501: Private static Declarator of <see cref="Unusable"/>
    /// </summary>
    private readonly static Action<ILogger, string, Exception?> _unusable = LoggerMessage.Define<string>(LogLevel.Warning, EventIds.Constants.CONFIGURATION_UNUSABLE, "Configuration is Unusable.  Reason {reason}");

    /// <summary>
    /// 501 - The configuration was either unavailable, corrupt, or impossible to read.  The reason will hint IT where to look, what to look for and how to fix it.
    /// Writes a message like "Configuration is Unusable.  Reason {reason}"
    /// of <see cref="Microsoft.Extensions.Logging.LogLevel.Warning"/> and Event ID <see cref="EventIds.Constants.CONFIGURATION_UNUSABLE">501</see>  (of event level/category <see cref="EventIds.UnrecoverableWarning"/>)
    /// </summary>
    public static void Configuration_Unusable(this ILogger logger, string reason) => _unusable(logger, reason, default!);

    /// <summary>
    /// 111: Private static Declarator of <see cref="ValueIsValid"/>
    /// </summary>
    private readonly static Action<ILogger, string, Exception?> _valueIsValid = LoggerMessage.Define<string>(LogLevel.Information, EventIds.Constants.CONFIGURATION_VALUEISVALID, "Configuration value for {friendlyName} is IsValid");

    /// <summary>
    /// 111 - The values from the configuration are useable and valid.  Well, they smell good.
    /// Writes a message like "Configuration value for {friendlyName} is IsValid"
    /// of <see cref="Microsoft.Extensions.Logging.LogLevel.Information"/> and Event ID <see cref="EventIds.Constants.CONFIGURATION_VALUEISVALID">111</see>  (of event level/category <see cref="EventIds.LowLevel"/>)
    /// </summary>
    public static void Configuration_ValueIsValid(this ILogger logger, string friendlyName) => _valueIsValid(logger, friendlyName, default!);

    /// <summary>
    /// 114: Private static Declarator of <see cref="ConnectionStringIsValid"/>
    /// </summary>
    private readonly static Action<ILogger, string, Exception?> _connectionStringIsValid = LoggerMessage.Define<string>(LogLevel.Information, EventIds.Constants.CONFIGURATION_CONNECTIONSTRINGISVALID, "ConnectionString {name} is valid");

    /// <summary>
    /// 114 - A connection to the database was successful
    /// Writes a message like "ConnectionString {name} is valid"
    /// of <see cref="Microsoft.Extensions.Logging.LogLevel.Information"/> and Event ID <see cref="EventIds.Constants.CONFIGURATION_CONNECTIONSTRINGISVALID">114</see>  (of event level/category <see cref="EventIds.LowLevel"/>)
    /// </summary>
    public static void Configuration_ConnectionStringIsValid(this ILogger logger, string Name) => _connectionStringIsValid(logger, Name, default!);

    /// <summary>
    /// 402: Private static Declarator of <see cref="NotVerifiable"/>
    /// </summary>
    private readonly static Action<ILogger, Exception?> _notVerifiable = LoggerMessage.Define(LogLevel.Warning, EventIds.Constants.CONFIGURATION_NOTVERIFIABLE, "Configuration is not verifiable.");

    /// <summary>
    /// 402 - The configuration was loaded, but the content is not verifiable
    /// Writes a message like "Configuration is not verifiable."
    /// of <see cref="Microsoft.Extensions.Logging.LogLevel.Warning"/> and Event ID <see cref="EventIds.Constants.CONFIGURATION_NOTVERIFIABLE">402</see>  (of event level/category <see cref="EventIds.RecoverableWarning"/>)
    /// </summary>
    public static void Configuration_NotVerifiable(this ILogger logger) => _notVerifiable(logger, default!);

  }
}

