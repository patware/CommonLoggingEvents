// Generated by a tool, do not change manually
// Tool: GenerateLibrary.ps1
// Generated Date: 
using System;
using Microsoft.Extensions.Logging;

namespace CommonLoggingLibrary.External
{
  /// <summary>
  /// Calls to external systems, like database, services, urls and files/folders, local or remote.  The difference between ConnectingTo and Calling are important - ConnectingTo/ConnectedTo is for systems that keep an open connection to a service, like SqlConnection or two way communications framework like SignalR, gRPC.  Calling on the other hand is the actual call to consume the service it&#39;s connected to.  In some situation, there are no persistent connection and the ConnectingTo/ConnectedTo aren&#39;t used.  Typical lifecycle of External: ConnectingTo -&gt; ConnectedTo.
  /// </summary>
  public static class ExternalLoggingExtensions
  {
    /// <summary>
    /// 505: Private static Declarator of <see cref="NotificationNotSent"/>
    /// </summary>
    private readonly static Action<ILogger, string, string, Exception?> _notificationNotSent = LoggerMessage.Define<string, string>(LogLevel.Warning, EventIds.Constants.EXTERNAL_NOTIFICATIONNOTSENT, "Notification not sent.  Method {method}, Recipient {recipient}");

    /// <summary>

    /// Writes a message like "Notification not sent.  Method {method}, Recipient {recipient}"
    /// of <see cref="Microsoft.Extensions.Logging.LogLevel.Warning"/> and Event ID <see cref="EventIds.Constants.EXTERNAL_NOTIFICATIONNOTSENT">505</see>  (of event level/category <see cref="EventIds.UnrecoverableWarning"/>)
    /// </summary>
    public static void External_NotificationNotSent(this ILogger logger, string method, string recipient) => _notificationNotSent(logger, method, recipient, default!);

    /// <summary>
    /// 503: Private static Declarator of <see cref="ConnectionFailedAuthorization"/>
    /// </summary>
    private readonly static Action<ILogger, string, string, string, Exception?> _connectionFailedAuthorization = LoggerMessage.Define<string, string, string>(LogLevel.Warning, EventIds.Constants.EXTERNAL_CONNECTIONFAILEDAUTHORIZATION, "Connection to External {externalName} with {credentials} failed because of an authorization error.  {exception}");

    /// <summary>
    /// 503 - A connection to an external system was attempted, the account/credential is valid but doesn&#39;t have the proper rights/permissions in the target system.
    /// Writes a message like "Connection to External {externalName} with {credentials} failed because of an authorization error.  {exception}"
    /// of <see cref="Microsoft.Extensions.Logging.LogLevel.Warning"/> and Event ID <see cref="EventIds.Constants.EXTERNAL_CONNECTIONFAILEDAUTHORIZATION">503</see>  (of event level/category <see cref="EventIds.UnrecoverableWarning"/>)
    /// </summary>
    public static void External_ConnectionFailedAuthorization(this ILogger logger, string externalName, string credentials, string exception) => _connectionFailedAuthorization(logger, externalName, credentials, exception, default!);

    /// <summary>
    /// 202: Private static Declarator of <see cref="ConnectedTo"/>
    /// </summary>
    private readonly static Action<ILogger, string, string, Exception?> _connectedTo = LoggerMessage.Define<string, string>(LogLevel.Information, EventIds.Constants.EXTERNAL_CONNECTEDTO, "Connecting to External. Name: {externalName}, uri {uri}");

    /// <summary>
    /// 202 - A successful connection has been created with the target system.
    /// Writes a message like "Connecting to External. Name: {externalName}, uri {uri}"
    /// of <see cref="Microsoft.Extensions.Logging.LogLevel.Information"/> and Event ID <see cref="EventIds.Constants.EXTERNAL_CONNECTEDTO">202</see>  (of event level/category <see cref="EventIds.OperationalInformation"/>)
    /// </summary>
    public static void External_ConnectedTo(this ILogger logger, string externalName, string uri) => _connectedTo(logger, externalName, uri, default!);

    /// <summary>
    /// 602: Private static Declarator of <see cref="ConnectionFailedTargetServiceUnavailable"/>
    /// </summary>
    private readonly static Action<ILogger, string, string, string, Exception?> _connectionFailedTargetServiceUnavailable = LoggerMessage.Define<string, string, string>(LogLevel.Error, EventIds.Constants.EXTERNAL_CONNECTIONFAILEDTARGETSERVICEUNAVAILABLE, "Connection to External {externalName} using {uri} failed because target is unavailable {exception}");

    /// <summary>
    /// 602 - Couldn&#39;t connect to target system, no response from target system.
    /// Writes a message like "Connection to External {externalName} using {uri} failed because target is unavailable {exception}"
    /// of <see cref="Microsoft.Extensions.Logging.LogLevel.Error"/> and Event ID <see cref="EventIds.Constants.EXTERNAL_CONNECTIONFAILEDTARGETSERVICEUNAVAILABLE">602</see>  (of event level/category <see cref="EventIds.Exceptional"/>)
    /// </summary>
    public static void External_ConnectionFailedTargetServiceUnavailable(this ILogger logger, string externalName, string uri, string exception) => _connectionFailedTargetServiceUnavailable(logger, externalName, uri, exception, default!);

    /// <summary>
    /// 201: Private static Declarator of <see cref="ConnectingTo"/>
    /// </summary>
    private readonly static Action<ILogger, string, string, Exception?> _connectingTo = LoggerMessage.Define<string, string>(LogLevel.Information, EventIds.Constants.EXTERNAL_CONNECTINGTO, "Connecting to External. Name: {externalName}, uri {uri}");

    /// <summary>
    /// 201 - The application is connecting to the external system.
    /// Writes a message like "Connecting to External. Name: {externalName}, uri {uri}"
    /// of <see cref="Microsoft.Extensions.Logging.LogLevel.Information"/> and Event ID <see cref="EventIds.Constants.EXTERNAL_CONNECTINGTO">201</see>  (of event level/category <see cref="EventIds.OperationalInformation"/>)
    /// </summary>
    /// <remarks>
    /// <para>Don&#39;t confuse Connecting vs Calling.  Calling is calling the external system&#39;s method/function, Connecting is typical of target systems that needs to be connected before being used/called, systems that have a certain keep-alive mechanism, authentication or two-way communication, like Sql Connection and SignalR</para>
    /// </remarks>
    public static void External_ConnectingTo(this ILogger logger, string externalName, string uri) => _connectingTo(logger, externalName, uri, default!);

    /// <summary>
    /// 502: Private static Declarator of <see cref="ConnectionFailedAuthentication"/>
    /// </summary>
    private readonly static Action<ILogger, string, string, string, Exception?> _connectionFailedAuthentication = LoggerMessage.Define<string, string, string>(LogLevel.Warning, EventIds.Constants.EXTERNAL_CONNECTIONFAILEDAUTHENTICATION, "Connection to External {externalName} with {credentials} failed because of an authentication error.  {exception}");

    /// <summary>
    /// 502 - A connection to an external system was attempted but the account/credential were invalid
    /// Writes a message like "Connection to External {externalName} with {credentials} failed because of an authentication error.  {exception}"
    /// of <see cref="Microsoft.Extensions.Logging.LogLevel.Warning"/> and Event ID <see cref="EventIds.Constants.EXTERNAL_CONNECTIONFAILEDAUTHENTICATION">502</see>  (of event level/category <see cref="EventIds.UnrecoverableWarning"/>)
    /// </summary>
    public static void External_ConnectionFailedAuthentication(this ILogger logger, string externalName, string credentials, string exception) => _connectionFailedAuthentication(logger, externalName, credentials, exception, default!);

    /// <summary>
    /// 203: Private static Declarator of <see cref="Calling"/>
    /// </summary>
    private readonly static Action<ILogger, string, string, Exception?> _calling = LoggerMessage.Define<string, string>(LogLevel.Information, EventIds.Constants.EXTERNAL_CALLING, "Calling external {externalName} uri {uri}");

    /// <summary>
    /// 203 - Calling the external target system&#39;s method/function
    /// Writes a message like "Calling external {externalName} uri {uri}"
    /// of <see cref="Microsoft.Extensions.Logging.LogLevel.Information"/> and Event ID <see cref="EventIds.Constants.EXTERNAL_CALLING">203</see>  (of event level/category <see cref="EventIds.OperationalInformation"/>)
    /// </summary>
    public static void External_Calling(this ILogger logger, string externalName, string uri) => _calling(logger, externalName, uri, default!);

    /// <summary>
    /// 601: Private static Declarator of <see cref="ConnectionFailedTimeout"/>
    /// </summary>
    private readonly static Action<ILogger, string, string, string, Exception?> _connectionFailedTimeout = LoggerMessage.Define<string, string, string>(LogLevel.Error, EventIds.Constants.EXTERNAL_CONNECTIONFAILEDTIMEOUT, "Connection to External {externalName} using {uri} failed because of a timeout {exception}");

    /// <summary>
    /// 601 - The connection to the target system failed, timed out
    /// Writes a message like "Connection to External {externalName} using {uri} failed because of a timeout {exception}"
    /// of <see cref="Microsoft.Extensions.Logging.LogLevel.Error"/> and Event ID <see cref="EventIds.Constants.EXTERNAL_CONNECTIONFAILEDTIMEOUT">601</see>  (of event level/category <see cref="EventIds.Exceptional"/>)
    /// </summary>
    public static void External_ConnectionFailedTimeout(this ILogger logger, string externalName, string uri, string exception) => _connectionFailedTimeout(logger, externalName, uri, exception, default!);

  }
}

