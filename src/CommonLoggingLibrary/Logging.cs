// Generated by a tool, do not change manually
// Tool: GenerateLibrary.ps1
// Generated Date: 
using System;
using Microsoft.Extensions.Logging;

namespace CommonLoggingLibrary.Logging
{
  /// <summary>
  /// Ironic, logging about logging.  Logging specific events.  Typical logging lifecycle: Initialized -&gt; Started -&gt; Stopped
  /// </summary>
  public static class LoggingLoggingExtensions
  {
    /// <summary>
    /// 117: Private static Declarator of <see cref="Initialized"/>
    /// </summary>
    private readonly static Action<ILogger, string[], Exception?> _initialized = LoggerMessage.Define<string[]>(LogLevel.Information, EventIds.Constants.LOGGING_INITIALIZED, "Logging is initialized and switching to the official target(s): {targets}");

    /// <summary>
    /// 117 - Logging has been initialized and this should entry should mark the last entry that targets the hard coded target.
    /// Writes a message like "Logging is initialized and switching to the official target(s): {targets}"
    /// of <see cref="Microsoft.Extensions.Logging.LogLevel.Information"/> and Event ID <see cref="EventIds.Constants.LOGGING_INITIALIZED">117</see>  (of event level/category <see cref="EventIds.LowLevel"/>)
    /// </summary>
    public static void Logging_Initialized(this ILogger logger, string[] targets) => _initialized(logger, targets, default!);

    /// <summary>
    /// 119: Private static Declarator of <see cref="Stopped"/>
    /// </summary>
    private readonly static Action<ILogger, Exception?> _stopped = LoggerMessage.Define(LogLevel.Information, EventIds.Constants.LOGGING_STOPPED, "Logging stopped");

    /// <summary>
    /// 119 - From here on, log entries won&#39;t end up to the official targets but in the hard coded/default targets.  There can be subsequent log entries, but they won&#39;t be shown in the official logging targets.
    /// Writes a message like "Logging stopped"
    /// of <see cref="Microsoft.Extensions.Logging.LogLevel.Information"/> and Event ID <see cref="EventIds.Constants.LOGGING_STOPPED">119</see>  (of event level/category <see cref="EventIds.LowLevel"/>)
    /// </summary>
    public static void Logging_Stopped(this ILogger logger) => _stopped(logger, default!);

    /// <summary>
    /// 118: Private static Declarator of <see cref="Started"/>
    /// </summary>
    private readonly static Action<ILogger, Exception?> _started = LoggerMessage.Define(LogLevel.Information, EventIds.Constants.LOGGING_STARTED, "Logging started");

    /// <summary>
    /// 118 - Marks the beginning of logging.
    /// Writes a message like "Logging started"
    /// of <see cref="Microsoft.Extensions.Logging.LogLevel.Information"/> and Event ID <see cref="EventIds.Constants.LOGGING_STARTED">118</see>  (of event level/category <see cref="EventIds.LowLevel"/>)
    /// </summary>
    /// <remarks>
    /// <para>Isn&#39;t it ironic, don&#39;t you think?  A log entry about logging.</para>
    /// <para>Actually, this is a very special log entry.  Before this entry, all log entries were not going to a hard coded/default log destination because configuration wasn&#39;t yet loaded, dependency injection hasn&#39;t occurred yet either, so the logging wasn&#39;t fully and correctly setup/configured.  This entry is the first event that goes to the configured target logging destination.</para>
    /// </remarks>
    public static void Logging_Started(this ILogger logger) => _started(logger, default!);

  }
}

