// Generated by a tool, do not change manually
// Tool: GenerateLibrary.ps1
// Generated Date: 
using System;
using Microsoft.Extensions.Logging;

namespace CommonLoggingLibrary.Application
{
  /// <summary>
  /// Events that are related to the lifetime of the application, like starting, pausing, stopped.  A typical app&#39;s lifecycle will be: Starting -&gt; Started [-&gt; Pausing -&gt; Paused [-&gt; Resuming -&gt; Resumed]] -&gt; Stopping -&gt; Stopped.
  /// </summary>
  public static class ApplicationLoggingExtensions
  {
    /// <summary>
    /// 102: Private static Declarator of <see cref="Started"/>
    /// </summary>
    private readonly static Action<ILogger, double, Exception?> _started = LoggerMessage.Define<double>(LogLevel.Information, EventIds.Constants.APPLICATION_STARTED, "Application is Started.  Elapsed: {totalMilliseconds} milliseconds");

    /// <summary>
    /// 102 - The initializing, loading, configuration, validation has been done and the application is now fully ready to welcome customers and process requests
    /// Writes a message like "Application is Started.  Elapsed: {totalMilliseconds} milliseconds"
    /// of <see cref="Microsoft.Extensions.Logging.LogLevel.Information"/> and Event ID <see cref="EventIds.Constants.APPLICATION_STARTED">102</see>  (of event level/category <see cref="EventIds.LowLevel"/>)
    /// </summary>
    public static void Application_Started(this ILogger logger, double totalMilliseconds) => _started(logger, totalMilliseconds, default!);

    /// <summary>
    /// 105: Private static Declarator of <see cref="Pausing"/>
    /// </summary>
    private readonly static Action<ILogger, string, Exception?> _pausing = LoggerMessage.Define<string>(LogLevel.Information, EventIds.Constants.APPLICATION_PAUSING, "Application is pausing.  Reason: {reason}");

    /// <summary>
    /// 105 - Someone or something had enough, and every needs to take a break, so stop what you&#39;re doing and listen up.
    /// Writes a message like "Application is pausing.  Reason: {reason}"
    /// of <see cref="Microsoft.Extensions.Logging.LogLevel.Information"/> and Event ID <see cref="EventIds.Constants.APPLICATION_PAUSING">105</see>  (of event level/category <see cref="EventIds.LowLevel"/>)
    /// </summary>
    public static void Application_Pausing(this ILogger logger, string reason) => _pausing(logger, reason, default!);

    /// <summary>
    /// 101: Private static Declarator of <see cref="Starting"/>
    /// </summary>
    private readonly static Action<ILogger, string[], Exception?> _starting = LoggerMessage.Define<string[]>(LogLevel.Information, EventIds.Constants.APPLICATION_STARTING, "Application is starting.  Args: {args}");

    /// <summary>
    /// 101 - The first entry your application should log, marking the start of a great journey.
    /// Writes a message like "Application is starting.  Args: {args}"
    /// of <see cref="Microsoft.Extensions.Logging.LogLevel.Information"/> and Event ID <see cref="EventIds.Constants.APPLICATION_STARTING">101</see>  (of event level/category <see cref="EventIds.LowLevel"/>)
    /// </summary>
    public static void Application_Starting(this ILogger logger, string[] args) => _starting(logger, args, default!);

    /// <summary>
    /// 701: Private static Declarator of <see cref="UnhandledException"/>
    /// </summary>
    private readonly static Action<ILogger, string, Exception?> _unhandledException = LoggerMessage.Define<string>(LogLevel.Critical, EventIds.Constants.APPLICATION_UNHANDLEDEXCEPTION, "Unhandled exception {exception}");

    /// <summary>
    /// 701 - Ultimate development shame, this marks the worst that can happen, an exception occurred, wasn&#39;t trapped but the application&#39;s main process caught it.
    /// Writes a message like "Unhandled exception {exception}"
    /// of <see cref="Microsoft.Extensions.Logging.LogLevel.Critical"/> and Event ID <see cref="EventIds.Constants.APPLICATION_UNHANDLEDEXCEPTION">701</see>  (of event level/category <see cref="EventIds.Catastrophic"/>)
    /// </summary>
    public static void Application_UnhandledException(this ILogger logger, string exception) => _unhandledException(logger, exception, default!);

    /// <summary>
    /// 107: Private static Declarator of <see cref="Resuming"/>
    /// </summary>
    private readonly static Action<ILogger, Exception?> _resuming = LoggerMessage.Define(LogLevel.Information, EventIds.Constants.APPLICATION_RESUMING, "Application is Resuming");

    /// <summary>
    /// 107 - No more questions?  Back to work Edward!
    /// Writes a message like "Application is Resuming"
    /// of <see cref="Microsoft.Extensions.Logging.LogLevel.Information"/> and Event ID <see cref="EventIds.Constants.APPLICATION_RESUMING">107</see>  (of event level/category <see cref="EventIds.LowLevel"/>)
    /// </summary>
    public static void Application_Resuming(this ILogger logger) => _resuming(logger, default!);

    /// <summary>
    /// 104: Private static Declarator of <see cref="Stopped"/>
    /// </summary>
    private readonly static Action<ILogger, Exception?> _stopped = LoggerMessage.Define(LogLevel.Information, EventIds.Constants.APPLICATION_STOPPED, "Application is Stopped");

    /// <summary>
    /// 104 - Lights are closed, you look back and smile, good night.
    /// Writes a message like "Application is Stopped"
    /// of <see cref="Microsoft.Extensions.Logging.LogLevel.Information"/> and Event ID <see cref="EventIds.Constants.APPLICATION_STOPPED">104</see>  (of event level/category <see cref="EventIds.LowLevel"/>)
    /// </summary>
    public static void Application_Stopped(this ILogger logger) => _stopped(logger, default!);

    /// <summary>
    /// 301: Private static Declarator of <see cref="InMaintenance"/>
    /// </summary>
    private readonly static Action<ILogger, Exception?> _inMaintenance = LoggerMessage.Define(LogLevel.Warning, EventIds.Constants.APPLICATION_INMAINTENANCE, "Application is in Maintenance mode.");

    /// <summary>
    /// 301 - The application is maintenance mode.  Current requests might/will continue to be processed, but new ones will be refused.
    /// Writes a message like "Application is in Maintenance mode."
    /// of <see cref="Microsoft.Extensions.Logging.LogLevel.Warning"/> and Event ID <see cref="EventIds.Constants.APPLICATION_INMAINTENANCE">301</see>  (of event level/category <see cref="EventIds.OperationalWarning"/>)
    /// </summary>
    public static void Application_InMaintenance(this ILogger logger) => _inMaintenance(logger, default!);

    /// <summary>
    /// 108: Private static Declarator of <see cref="Resumed"/>
    /// </summary>
    private readonly static Action<ILogger, Exception?> _resumed = LoggerMessage.Define(LogLevel.Information, EventIds.Constants.APPLICATION_RESUMED, "Application is Resumed");

    /// <summary>
    /// 108 - Back in the saddle again, work has resumed as normal.
    /// Writes a message like "Application is Resumed"
    /// of <see cref="Microsoft.Extensions.Logging.LogLevel.Information"/> and Event ID <see cref="EventIds.Constants.APPLICATION_RESUMED">108</see>  (of event level/category <see cref="EventIds.LowLevel"/>)
    /// </summary>
    public static void Application_Resumed(this ILogger logger) => _resumed(logger, default!);

    /// <summary>
    /// 103: Private static Declarator of <see cref="Stopping"/>
    /// </summary>
    private readonly static Action<ILogger, string, Exception?> _stopping = LoggerMessage.Define<string>(LogLevel.Information, EventIds.Constants.APPLICATION_STOPPING, "Application is stopping.  Reason: {reason}");

    /// <summary>
    /// 103 - All good things come to an end, this entry marks the beginning of the end, locks the front door, puts the closed sign and cleans up.
    /// Writes a message like "Application is stopping.  Reason: {reason}"
    /// of <see cref="Microsoft.Extensions.Logging.LogLevel.Information"/> and Event ID <see cref="EventIds.Constants.APPLICATION_STOPPING">103</see>  (of event level/category <see cref="EventIds.LowLevel"/>)
    /// </summary>
    public static void Application_Stopping(this ILogger logger, string reason) => _stopping(logger, reason, default!);

    /// <summary>
    /// 401: Private static Declarator of <see cref="InDegradedMode"/>
    /// </summary>
    private readonly static Action<ILogger, Exception?> _inDegradedMode = LoggerMessage.Define(LogLevel.Warning, EventIds.Constants.APPLICATION_INDEGRADEDMODE, "Application is in Degraded mode.  Start throttling incoming connections or scale out/scale up.");

    /// <summary>
    /// 401 - The application is running in degraded mode, some functionality might be affected.
    /// Writes a message like "Application is in Degraded mode.  Start throttling incoming connections or scale out/scale up."
    /// of <see cref="Microsoft.Extensions.Logging.LogLevel.Warning"/> and Event ID <see cref="EventIds.Constants.APPLICATION_INDEGRADEDMODE">401</see>  (of event level/category <see cref="EventIds.RecoverableWarning"/>)
    /// </summary>
    /// <remarks>
    /// <para>Typical outcome of a failed health check.</para>
    /// <para>A great application will have a plan B in the event it finds it can&#39;t do certain actions, inform the IT/Admins and update the UI accordingly so the user aware of the situation but that they&#39;re in good hands and that they don&#39;t have to worry, things will be alright.</para>
    /// <para>An example of a plan B is an external system that suddenly becomes offline, but the app can run with cached values, or will switch to a local storage system until the target system becomes back online.</para>
    /// </remarks>
    public static void Application_InDegradedMode(this ILogger logger) => _inDegradedMode(logger, default!);

    /// <summary>
    /// 106: Private static Declarator of <see cref="Paused"/>
    /// </summary>
    private readonly static Action<ILogger, Exception?> _paused = LoggerMessage.Define(LogLevel.Information, EventIds.Constants.APPLICATION_PAUSED, "Application is Paused");

    /// <summary>
    /// 106 - Everyone has paused their activity, here are your instructions.
    /// Writes a message like "Application is Paused"
    /// of <see cref="Microsoft.Extensions.Logging.LogLevel.Information"/> and Event ID <see cref="EventIds.Constants.APPLICATION_PAUSED">106</see>  (of event level/category <see cref="EventIds.LowLevel"/>)
    /// </summary>
    public static void Application_Paused(this ILogger logger) => _paused(logger, default!);

    /// <summary>
    /// 204: Private static Declarator of <see cref="InNormalMode"/>
    /// </summary>
    private readonly static Action<ILogger, Exception?> _inNormalMode = LoggerMessage.Define(LogLevel.Information, EventIds.Constants.APPLICATION_INNORMALMODE, "Application is running in Normal Mode");

    /// <summary>
    /// 204 - Indicates that, according to self diagnostics and the best of knowledge, the application is running normally.
    /// Writes a message like "Application is running in Normal Mode"
    /// of <see cref="Microsoft.Extensions.Logging.LogLevel.Information"/> and Event ID <see cref="EventIds.Constants.APPLICATION_INNORMALMODE">204</see>  (of event level/category <see cref="EventIds.OperationalInformation"/>)
    /// </summary>
    public static void Application_InNormalMode(this ILogger logger) => _inNormalMode(logger, default!);

  }
}

