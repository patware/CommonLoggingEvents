// Generated by a tool, do not change manually
// Tool: GenerateLibrary.ps1
// Generated Date: 

using Microsoft.Extensions.Logging;

namespace CommonLoggingLibrary.EventIds
{
  /// <summary>
  /// Positive, low-level lifecycle related app events like Start, Pause, Stop, reading Configuration/Settings, Dependency initialization - Application plumbing, no intervention required by anyone
  /// </summary>
  public static class LowLevel
  {
    /// <summary>
    /// 101 The first entry your application should log, marking the start of a great journey.  Used in the raising of Event ID <see cref="Constants.APPLICATION_STARTING">101</see>.  To raise this Event, use method <see cref="Application.Starting"/>
    /// </summary>
    public static EventId Application_Starting => new(Constants.APPLICATION_STARTING, nameof(Application.ApplicationLoggingExtensions.Application_Starting));
    /// <summary>
    /// 102 The initializing, loading, configuration, validation has been done and the application is now fully ready to welcome customers and process requests  Used in the raising of Event ID <see cref="Constants.APPLICATION_STARTED">102</see>.  To raise this Event, use method <see cref="Application.Started"/>
    /// </summary>
    public static EventId Application_Started => new(Constants.APPLICATION_STARTED, nameof(Application.ApplicationLoggingExtensions.Application_Started));
    /// <summary>
    /// 103 All good things come to an end, this entry marks the beginning of the end, locks the front door, puts the closed sign and cleans up.  Used in the raising of Event ID <see cref="Constants.APPLICATION_STOPPING">103</see>.  To raise this Event, use method <see cref="Application.Stopping"/>
    /// </summary>
    public static EventId Application_Stopping => new(Constants.APPLICATION_STOPPING, nameof(Application.ApplicationLoggingExtensions.Application_Stopping));
    /// <summary>
    /// 104 Lights are closed, you look back and smile, good night.  Used in the raising of Event ID <see cref="Constants.APPLICATION_STOPPED">104</see>.  To raise this Event, use method <see cref="Application.Stopped"/>
    /// </summary>
    public static EventId Application_Stopped => new(Constants.APPLICATION_STOPPED, nameof(Application.ApplicationLoggingExtensions.Application_Stopped));
    /// <summary>
    /// 105 Someone or something had enough, and every needs to take a break, so stop what you&#39;re doing and listen up.  Used in the raising of Event ID <see cref="Constants.APPLICATION_PAUSING">105</see>.  To raise this Event, use method <see cref="Application.Pausing"/>
    /// </summary>
    public static EventId Application_Pausing => new(Constants.APPLICATION_PAUSING, nameof(Application.ApplicationLoggingExtensions.Application_Pausing));
    /// <summary>
    /// 106 Everyone has paused their activity, here are your instructions.  Used in the raising of Event ID <see cref="Constants.APPLICATION_PAUSED">106</see>.  To raise this Event, use method <see cref="Application.Paused"/>
    /// </summary>
    public static EventId Application_Paused => new(Constants.APPLICATION_PAUSED, nameof(Application.ApplicationLoggingExtensions.Application_Paused));
    /// <summary>
    /// 107 No more questions?  Back to work Edward!  Used in the raising of Event ID <see cref="Constants.APPLICATION_RESUMING">107</see>.  To raise this Event, use method <see cref="Application.Resuming"/>
    /// </summary>
    public static EventId Application_Resuming => new(Constants.APPLICATION_RESUMING, nameof(Application.ApplicationLoggingExtensions.Application_Resuming));
    /// <summary>
    /// 108 Back in the saddle again, work has resumed as normal.  Used in the raising of Event ID <see cref="Constants.APPLICATION_RESUMED">108</see>.  To raise this Event, use method <see cref="Application.Resumed"/>
    /// </summary>
    public static EventId Application_Resumed => new(Constants.APPLICATION_RESUMED, nameof(Application.ApplicationLoggingExtensions.Application_Resumed));
    /// <summary>
    /// 109 Configuration has been dormant for a long time and needs to be re-hydrated.  Used in the raising of Event ID <see cref="Constants.CONFIGURATION_READING">109</see>.  To raise this Event, use method <see cref="Configuration.Reading"/>
    /// </summary>
    public static EventId Configuration_Reading => new(Constants.CONFIGURATION_READING, nameof(Configuration.ConfigurationLoggingExtensions.Configuration_Reading));
    /// <summary>
    /// 110 We have the values from the configuration, but are they any good?  Test time.  Used in the raising of Event ID <see cref="Constants.CONFIGURATION_VALIDATING">110</see>.  To raise this Event, use method <see cref="Configuration.Validating"/>
    /// </summary>
    public static EventId Configuration_Validating => new(Constants.CONFIGURATION_VALIDATING, nameof(Configuration.ConfigurationLoggingExtensions.Configuration_Validating));
    /// <summary>
    /// 111 The values from the configuration are useable and valid.  Well, they smell good.  Used in the raising of Event ID <see cref="Constants.CONFIGURATION_VALUEISVALID">111</see>.  To raise this Event, use method <see cref="Configuration.ValueIsValid"/>
    /// </summary>
    public static EventId Configuration_ValueIsValid => new(Constants.CONFIGURATION_VALUEISVALID, nameof(Configuration.ConfigurationLoggingExtensions.Configuration_ValueIsValid));
    /// <summary>
    /// 112 Connection strings can be stored using a different configuration mechanism.  Used in the raising of Event ID <see cref="Constants.CONFIGURATION_READINGCONNECTIONSTRING">112</see>.  To raise this Event, use method <see cref="Configuration.ReadingConnectionString"/>
    /// </summary>
    public static EventId Configuration_ReadingConnectionString => new(Constants.CONFIGURATION_READINGCONNECTIONSTRING, nameof(Configuration.ConfigurationLoggingExtensions.Configuration_ReadingConnectionString));
    /// <summary>
    /// 113 Having a connection string doesn&#39;t mean it&#39;s useable, another taste test.  Used in the raising of Event ID <see cref="Constants.CONFIGURATION_VERIFYINGCONNECTIONSTRING">113</see>.  To raise this Event, use method <see cref="Configuration.VerifyingConnectionString"/>
    /// </summary>
    public static EventId Configuration_VerifyingConnectionString => new(Constants.CONFIGURATION_VERIFYINGCONNECTIONSTRING, nameof(Configuration.ConfigurationLoggingExtensions.Configuration_VerifyingConnectionString));
    /// <summary>
    /// 114 A connection to the database was successful  Used in the raising of Event ID <see cref="Constants.CONFIGURATION_CONNECTIONSTRINGISVALID">114</see>.  To raise this Event, use method <see cref="Configuration.ConnectionStringIsValid"/>
    /// </summary>
    public static EventId Configuration_ConnectionStringIsValid => new(Constants.CONFIGURATION_CONNECTIONSTRINGISVALID, nameof(Configuration.ConfigurationLoggingExtensions.Configuration_ConnectionStringIsValid));
    /// <summary>
    /// 115 Good applications practice IoC/Inversion of Control by leveraging the power of a Dependency Injection framework.  This event marks the start of the Dependency Injection setup.  Used in the raising of Event ID <see cref="Constants.DEPENDENCY_LOADING">115</see>.  To raise this Event, use method <see cref="Dependency.Loading"/>
    /// </summary>
    public static EventId Dependency_Loading => new(Constants.DEPENDENCY_LOADING, nameof(Dependency.DependencyLoggingExtensions.Dependency_Loading));
    /// <summary>
    /// 116 Alright, all dependencies have been resolved, loaded, configured, verified and validated.  Used in the raising of Event ID <see cref="Constants.DEPENDENCY_RESOLVED">116</see>.  To raise this Event, use method <see cref="Dependency.Resolved"/>
    /// </summary>
    public static EventId Dependency_Resolved => new(Constants.DEPENDENCY_RESOLVED, nameof(Dependency.DependencyLoggingExtensions.Dependency_Resolved));
    /// <summary>
    /// 117 Logging has been initialized and this should entry should mark the last entry that targets the hard coded target.  Used in the raising of Event ID <see cref="Constants.LOGGING_INITIALIZED">117</see>.  To raise this Event, use method <see cref="Logging.Initialized"/>
    /// </summary>
    public static EventId Logging_Initialized => new(Constants.LOGGING_INITIALIZED, nameof(Logging.LoggingLoggingExtensions.Logging_Initialized));
    /// <summary>
    /// 118 Marks the beginning of logging.  Used in the raising of Event ID <see cref="Constants.LOGGING_STARTED">118</see>.  To raise this Event, use method <see cref="Logging.Started"/>
    /// </summary>
    /// <remarks>
    /// <para>Isn&#39;t it ironic, don&#39;t you think?  A log entry about logging.</para>
    /// <para>Actually, this is a very special log entry.  Before this entry, all log entries were not going to a hard coded/default log destination because configuration wasn&#39;t yet loaded, dependency injection hasn&#39;t occurred yet either, so the logging wasn&#39;t fully and correctly setup/configured.  This entry is the first event that goes to the configured target logging destination.</para>
    /// </remarks>
    public static EventId Logging_Started => new(Constants.LOGGING_STARTED, nameof(Logging.LoggingLoggingExtensions.Logging_Started));
    /// <summary>
    /// 119 From here on, log entries won&#39;t end up to the official targets but in the hard coded/default targets.  There can be subsequent log entries, but they won&#39;t be shown in the official logging targets.  Used in the raising of Event ID <see cref="Constants.LOGGING_STOPPED">119</see>.  To raise this Event, use method <see cref="Logging.Stopped"/>
    /// </summary>
    public static EventId Logging_Stopped => new(Constants.LOGGING_STOPPED, nameof(Logging.LoggingLoggingExtensions.Logging_Stopped));
  }
}

